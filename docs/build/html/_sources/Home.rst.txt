Welcome
=======

Welcome to the pystorms library !! 

This is a simulation sandbox for the development and evaluation of stormwater control algorithms. 
This library uses EPA-SWMM as its core simulation engine for modeling stormwater dynamics, but can be easily configured to use an other customized simulation software with minimal overhead. Please refer to the advanced section for more information. 

Installation
------------

This package is built with python 3.7 and is supported on all operating systems (Windows, Mac OS, Linux).
It can installed using `pip <https://pypi.org/project/pip/>`_ or `conda <https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-pkgs.html>`_.

.. code:: bash

   pip install pystorms

If you run into any issues installing the package, please refer to the advanced section for additional installation instructions or reach out to us.

Getting Started
---------------

.. code:: python

   import pystorms


   def controller(state):
        actions = np.ones(2)
        if state[0] > 0.5:
                actions[0] = 0.5
        if state[1] > 0.5:
                actopns[1] = 0.5
        return actions

   env = pystorms.scenarios.theta()

   done = False 
   while not done:
       state = env.state()

       actions = controller(state)
       
       done = env.step(actions)

Scenarios are the fundamental components of the pystorms library. A scenario constitutes a stormwater network, a driving rainevent, and a control objective. When :code:`env = pystorms.scenarios.theta()` is called, all the necessary simulation modules are initialized and its control is handed back to the user. This simulation can be controlled by users using the method calls on :code:`env` class. States in the stormwater network(e.g. water levels, flows, pollutant concentrations) can be queried at any point of the simulation using the :code:`env.state()` method. This returns the predefined states for the simulation. Detailed state descriptions are presented in the scenario page. Once the control actions are identified, they can be implemented in the network and simulation can be progressed a time-step using the :code:`env.step(<your actions here>)` call.
